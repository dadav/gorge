package components

import (
	customMiddleware "github.com/dadav/gorge/internal/middleware"
	"strconv"
	"time"
)

templ StatisticsView(stats *customMiddleware.Statistics) {
	<div>
		<h3>Statistics</h3>
		<p>ActiveConnections: { strconv.Itoa(stats.ActiveConnections) }</p>
		<p>ProxiedConnections: { strconv.Itoa(stats.ProxiedConnections) }</p>
		<p>TotalConnections: { strconv.Itoa(stats.TotalConnections) }</p>
		<p>TotalResponseTime: { stats.TotalResponseTime.String() }</p>
		<p>TotalCacheHits: { strconv.Itoa(stats.TotalCacheHits) }</p>
		<p>TotalCacheMisses: { strconv.Itoa(stats.TotalCacheMisses) }</p>
		<table id="statsTable">
			<thead>
				<tr>
					<th onclick="sortTable('statsTable', 0)" style="cursor: pointer;">Path ↕</th>
					<th onclick="sortTable('statsTable', 1)" style="cursor: pointer;">Connections ↕</th>
					<th onclick="sortTable('statsTable', 2)" style="cursor: pointer;">Proxied Connections ↕</th>
					<th onclick="sortTable('statsTable', 3)" style="cursor: pointer;">Average ResponseTime ↕</th>
					<th onclick="sortTable('statsTable', 4)" style="cursor: pointer;">Total ResponseTime ↕</th>
					<th onclick="sortTable('statsTable', 5)" style="cursor: pointer;">Cache (Hits/Misses) ↕</th>
				</tr>
			</thead>
			<tbody>
				for _, path := range getSortedKeys(stats) {
					<tr>
						<td>{ path }</td>
						<td>{ strconv.Itoa(stats.ConnectionsPerEndpoint[path]) }</td>
						<td>{ strconv.Itoa(stats.ProxiedConnectionsPerEndpoint[path]) }</td>
						<td>{ (stats.ResponseTimePerEndpoint[path] / time.Duration(stats.ConnectionsPerEndpoint[path])).String() }</td>
						<td>{ stats.ResponseTimePerEndpoint[path].String() }</td>
						if stats.CacheHitsPerEndpoint[path] > 0 || stats.CacheMissesPerEndpoint[path] > 0 {
							<td>{ strconv.Itoa(stats.CacheHitsPerEndpoint[path]) }/{ strconv.Itoa(stats.CacheMissesPerEndpoint[path]) }</td>
						} else {
							<td>N/A</td>
						}
					</tr>
				}
			</tbody>
		</table>
		<script src="/assets/js/table-sort.js"></script>
	</div>
}
