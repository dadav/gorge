package components

import (
	customMiddleware "github.com/dadav/gorge/internal/middleware"
	"strconv"
	"time"
)

templ StatisticsView(stats *customMiddleware.Statistics) {
	<div>
		<h3>Statistics</h3>
		<p>ActiveConnections: { strconv.Itoa(stats.ActiveConnections) }</p>
		<p>ProxiedConnections: { strconv.Itoa(stats.ProxiedConnections) }</p>
		<p>TotalConnections: { strconv.Itoa(stats.TotalConnections) }</p>
		<p>TotalResponseTime: { stats.TotalResponseTime.String() }</p>
		<p>TotalCacheHits: { strconv.Itoa(stats.TotalCacheHits) }</p>
		<p>TotalCacheMisses: { strconv.Itoa(stats.TotalCacheMisses) }</p>
		<table>
			<thead>
				<tr>
					<th>Path</th>
					<th>Connections</th>
					<th>Proxied Connections</th>
					<th>Average ResponseTime</th>
					<th>Total ResponseTime</th>
					<th>Cache (Hits/Misses)</th>
				</tr>
			</thead>
			<tbody>
				for path, connections := range stats.ConnectionsPerEndpoint {
					<tr>
						<td>{ path }</td>
						<td>{ strconv.Itoa(connections) }</td>
						<td>{ strconv.Itoa(stats.ProxiedConnectionsPerEndpoint[path]) }</td>
						<td>{ (stats.ResponseTimePerEndpoint[path] / time.Duration(connections)).String() }</td>
						<td>{ stats.ResponseTimePerEndpoint[path].String() }</td>
						if stats.CacheHitsPerEndpoint[path] > 0 || stats.CacheMissesPerEndpoint[path] > 0 {
							<td>{ strconv.Itoa(stats.CacheHitsPerEndpoint[path]) }/{ strconv.Itoa(stats.CacheMissesPerEndpoint[path]) }</td>
						} else {
							<td>N/A</td>
						}
					</tr>
				}
			</tbody>
		</table>
	</div>
}
